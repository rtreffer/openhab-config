rule "daylight_color_temp_wohnzimmer"
when
    // recompute every 6 seconds (10x per minute)
    Time cron "1/6 * * ? * * *"
then
  if (LightMode.state != "DAY" && LightMode.state != "DAYLIGHT") {
    return
  }

  val tvon = (TVisON.state !== NULL) && ((TVisON.state as OnOffType) == ON)
  var brightness = 100
  if (tvon) {
    brightness = 30
  }

  if ((Wohnzimmer_Couch_Color.state as PercentType).intValue > 0) {
    val current = (Wohnzimmer_Couch_ColorTemperature.state as PercentType).intValue
    val desired = (DaylightCT.state as PercentType).intValue
    if (Math.abs(current - desired) >= 1) {
      Wohnzimmer_Couch_ColorTemperature.sendCommand(Math.round(current + Math.signum(desired - current)))
    }

    val currentBrightness = (Wohnzimmer_Couch_Color.state as HSBType).brightness.intValue
    if (Math.abs(currentBrightness - brightness) >= 1) {
      Wohnzimmer_Couch_Color.sendCommand(Math.round(0.9*currentBrightness + 0.1*brightness + Math.signum(brightness - currentBrightness)))
    }
  }
  if ((Wohnzimmer_Flur_Color.state as PercentType).intValue > 0) {
    val current = (Wohnzimmer_Flur_ColorTemperature.state as PercentType).intValue
    val desired = (DaylightCT.state as PercentType).intValue
    if (Math.abs(current - desired) >= 1) {
      Wohnzimmer_Flur_ColorTemperature.sendCommand(Math.round(current + Math.signum(desired - current)))
    }

    val currentBrightness = (Wohnzimmer_Flur_Color.state as HSBType).brightness.intValue
    if (Math.abs(currentBrightness - brightness) >= 1) {
      Wohnzimmer_Flur_Color.sendCommand(Math.round(0.9*currentBrightness + 0.1*brightness + Math.signum(brightness - currentBrightness)))
    }
  }
end

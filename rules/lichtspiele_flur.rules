val filename="lichtspiele_flur"

rule "daylight_color_temp_flur"
when
    // recompute every 6 seconds (10x per minute)
    Time cron "4/6 * * ? * * *"
    or
    Item LastFlurMotionTime changed
then
  if (LightMode.state != "DAY" && LightMode.state != "DAYLIGHT" && LightMode.state !== NULL) {
    return
  }

  var Number brightness = 100
  var Number brightnessGuest = 100
  if ((TVisON.state !== NULL) && (TVisON.state as OnOffType) == ON) {
    brightness = 70
  }

  if (LastFlurMotionTime.state != NULL) {
    val Number last = (LastFlurMotionTime.state as DateTimeType).getCalendar.getTimeInMillis
    var Number delta = now.millis-last
    delta = delta / 1000
    var Number adjust = 5.0/(2.0+Math.sqrt(delta.doubleValue/60.0))
    if (adjust > 1.0) {
      adjust = 1.0
    }
    if (adjust < 0.25) {
      adjust = 0.25
    }
    brightness = adjust.doubleValue * brightness.doubleValue
    if (brightness < 25) {
      brightness = 25
    }
    brightnessGuest = adjust.doubleValue * brightnessGuest.doubleValue
  }

  if ((Flur_Wohnzimmer_Color.state as PercentType).intValue > 0) {
    val Number desired = (DaylightCT.state as PercentType).intValue
    if (Flur_Wohnzimmer_ColorTemperature.state == NULL) {
      Flur_Wohnzimmer_ColorTemperature.sendCommand(desired)
    } else {
      val Number current = (Flur_Wohnzimmer_ColorTemperature.state as PercentType).intValue
      if (Math.abs(current.intValue - desired.intValue) >= 2) {
        Flur_Wohnzimmer_ColorTemperature.sendCommand(Math.round(current.intValue + Math.signum(desired.intValue - current.intValue)))
      } else {
        if (current.intValue != desired.intValue) {
          Flur_Wohnzimmer_ColorTemperature.sendCommand(desired)
        }
      }
    }

    val Number currentBrightness = (Flur_Wohnzimmer_Color.state as HSBType).brightness.intValue
    if (Math.abs(currentBrightness.intValue - brightness.intValue) >= 1) {
      Flur_Wohnzimmer_Color.sendCommand(Math.round(0.9*currentBrightness + 0.1*brightness + Math.signum(brightness.intValue - currentBrightness.intValue)))
    }
  }
  if ((Flur_Gaestezimmer_Color.state as PercentType).intValue > 0) {
    val Number desired = (DaylightCT.state as PercentType).intValue
    if (Flur_Gaestezimmer_ColorTemperature.state == NULL) {
      Flur_Gaestezimmer_ColorTemperature.sendCommand(desired)
    } else {
      val current = (Flur_Gaestezimmer_ColorTemperature.state as PercentType).intValue
      if (Math.abs(current.intValue - desired.intValue) >= 2) {
        Flur_Gaestezimmer_ColorTemperature.sendCommand(Math.round(current.intValue + Math.signum(desired.intValue - current.intValue)))
      } else {
        if (desired.intValue != current.intValue) {
          Flur_Gaestezimmer_ColorTemperature.sendCommand(desired)
        }
      }
    }

    val Number currentBrightness = (Flur_Gaestezimmer_Color.state as HSBType).brightness.intValue
    if (Math.abs(currentBrightness.intValue - brightnessGuest.intValue) >= 2) {
      Flur_Gaestezimmer_Color.sendCommand(Math.round(0.9*currentBrightness + 0.1*brightnessGuest + Math.signum(brightnessGuest.intValue - currentBrightness.intValue)))
    } else {
      if (currentBrightness.intValue != brightnessGuest.intValue) {
        Flur_Gaestezimmer_Color.sendCommand(brightnessGuest)
      }
    }
  }
end

val filename="tv"

rule "tv_turned_on"
when
    Item Projector_Power changed to ON
then
    if (TVisON.state != ON) {
      TVisON.send(ON)
    }
end

rule "tv_turned_off"
when
    Item Projector_Power changed to OFF
then
    if (TVisON.state != OFF) {
      TVisON.send(OFF)
    }
end

rule "tv_screen_closed"
when
    Item Windows_Screen_Closed changed to ON
then
    if (TVisON.state != OFF) {
      TVisON.send(OFF)
      Projector_Power.send(OFF)
      Harmony_Beamer_ButtonPress.sendCommand("PowerOff")
    }
end

rule "tv_screen_opened"
when
    Item Windows_Screen_Closed changed to OFF
then
    if (TVisON.state != ON) {
        Harmony_Beamer_ButtonPress.sendCommand("PowerOn")
        TVisON.send(ON)
        Projector_Power.send(ON)
    }
end

rule "tv_sync"
when
    Time cron "12 * * ? * * *"
then
   if (WiFi_Switch_TV_D_power.state !== NULL) {
       val Number power = (WiFi_Switch_TV_D_power.state as Number).intValue
       if (power > 200) {
           LastTvON.sendCommand(now)
       }
   }
   if (Projector_Power.state == ON && TVisON != ON) {
     TVisON.sendCommand(ON)
   }
   if (Projector_Power.state == OFF && TVisON != OFF) {
     TVisON.sendCommand(OFF)
   }
end

rule "turn_tv_on"
when
    Item WiFi_Switch_TV_D_power changed
then
    if (WiFi_Switch_TV_D_power.state == NULL) {
        return
    }

    val Number power = (WiFi_Switch_TV_D_power.state as Number).intValue
    var Number lastOff = 0
    if (LastTvON.state != NULL) {
      lastOff = (LastTvON.state as DateTimeType).getCalendar.getTimeInMillis
    }
    val Number delta = now.millis-lastOff

    if (power >= 30 && TVisON != ON && delta > 600000) {
        Harmony_Beamer_ButtonPress.sendCommand("PowerOn")
        TVisON.send(ON)
        Projector_Power.send(ON)
    }

    if (power < 10 && TVisON.state != OFF) {
        TVisON.send(OFF)
    }
end
